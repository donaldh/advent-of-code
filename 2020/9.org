---
title: "AoC Day 9 â€“ Encoding Error"
date: 2020-12-10
tags:
  - raku
categories:
  - code
  - advent
comments: true
---

This is a solution to Advent of Code 2020 day 9, written in Raku.

<!--more-->

[[https://adventofcode.com/2020/day/9]]


** Part One

#+begin_quote
The first step of attacking the weakness in the XMAS data is to find the first number in the
list (after the preamble) which is not the sum of two of the 25 numbers before it. What is the
first number that does not have this property?
#+end_quote

*** Raku

#+begin_src raku :results output
  my @numbers = '9-input.txt'.IO.lines;

  for 25..^@numbers.elems -> $n {
      my @window = @numbers[$n-25..$n-1];
      my $next = @numbers[$n];
      my @results = @window.combinations(2).map({ [+] $_ }).grep({$_ == $next});
      say $next if @results.elems == 0
  }
#+end_src

#+RESULTS:
: 258585477


** Part Two

#+begin_quote
The final step in breaking the XMAS encryption relies on the invalid number you just found: you
must find a contiguous set of at least two numbers in your list which sum to the invalid number
from step 1.

What is the encryption weakness in your XMAS-encrypted list of numbers?
#+end_quote

*** Raku

#+begin_src raku :results output :tangle yes :shebang "#!/usr/bin/env raku"
  my @numbers = '9-input.txt'.IO.lines.map({+$_});
  my $elems = @numbers.elems;

  for 1..^$elems -> $n {
      for ^($elems - $n) -> $s {
          my @candidates = @numbers[$s .. $s + $n];
          my $sum = [+] @candidates;
          if $sum == 258585477 {
              say (@candidates.min + @candidates.max);
              exit;
          }
      }
  }
#+end_src

#+RESULTS:
: 36981213
